set nocompatible                                " turn off VI compatibility mode
call pathogen#infect()                          " load Pathogen bundles
filetype plugin indent on                       " use filetype detection and load plugins and indent for them
au BufRead,BufNewFile *.scss set filetype=scss  " manually define scss filetype detection
set directory^=$HOME/.vim/.swp//                " centralize swp file location (trailing / is important)
runtime macros/matchit.vim

" Appearance
syntax on                                       " turn on syntax highlighting
set t_Co=256                                    " use 256 colors
set background=dark                             " dark background
let g:seoul256_background = 235
let g:solarized_termcolors = 256
let base16colorspace = 256                      " Access colors present in 256 colorspace
colorscheme base16-tomorrow                     " and base16-tomorrow as default theme

" Text formatting
set ai                                          " auto-indent
set si                                          " smart indentation
set expandtab                                   " use soft tabs
set softtabstop=2                               " that are 2 spaces wide
set shiftwidth=2                                " auto-indent and shift by 2 spaces
set list                                        " show non-printed chars
set listchars=tab:>-,trail:Â·                    " specifically, tabs and trailing whitespace
set nowrap                                      " turn off line wrapping

" UI
set mouse=a                                     " use mouse in all modes
set wildmode=longest,list,full                  " tab completeion: 1) bash-like, 2) list, 3) wildmenu
set wildmenu                                    " use wildmenu (3rd tab)
set wildignore+=/venv/*,*.pyc,.root,_Chapter.xml " don't wildmenu these
set number                                      " turn on line numbers
set cursorline                                  " highlight current line
set laststatus=2                                " always show statusline
set noshowmode                                  " but not mode
set clipboard=unnamed                           " use OS clipboard by default
set backspace=indent,eol,start                  " let me delete whitespace, damn it
set splitbelow                                  " make new splits appear below
set splitright                                  " make new vertical splits appear to the right

let NERDTreeIgnore = ['\.pyc$', '.root']        " ignore from nerdtree
let NERDTreeShowHidden=1                        " show dotfiles in NERDTree

" Set cursor to a line in edit mode
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
  set ttymouse=xterm2                           " enable mouse control in tmux
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" Custom key mapping
inoremap jj <Esc>
" How many times must I insert jJ:w?
inoremap jJ <Esc>
nnoremap <Leader>d :NERDTreeToggle<CR>
nnoremap X $x
" Make Y behave like D
nnoremap Y y$
" Tabularize
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a{ :Tabularize /{<CR>
vmap <Leader>a{ :Tabularize /{<CR>
nmap <Leader>a: :Tabularize /:\zs<CR>
vmap <Leader>a: :Tabularize /:\zs<CR>
nmap <Leader>a, :Tabularize /,\zs<CR>
vmap <Leader>a, :Tabularize /,\zs<CR>
nmap <Leader>a> :Tabularize /[=-]><CR>
vmap <Leader>a> :Tabularize /[=-]><CR>
nmap <Leader>a\| :Tabularize /\|<CR>
vmap <Leader>a\| :Tabularize /\|<CR>
" remove superfluous whitespace
map <Leader><Space> :%s/\s\+$//g<CR>
" Visual indent
vnoremap < <gv
vnoremap > >gv
nnoremap <Leader>t :Dispatch rspec %<CR>
nnoremap <Leader>g :GitGutterToggle<CR>

nnoremap <silent> <C-N> :Dispatch git grep --no-color <C-R><C-W><CR>
nmap <silent> <C-d> <Plug>DashSearch

function! FindFile()
  if !filereadable('.file-index')
    call ReindexFiles()
  endif

  try
    let l:response = system('cat .file-index| fzf-tmux --expect enter,ctrl-v,ctrl-x')
  catch /Vim:Interrupt/
    redraw!
    return
  endtry

  redraw!
  if strlen(l:response) == 0 | return | endif

  let l:parts = split(l:response, "\n")
  let l:cmd = l:parts[0]
  let l:file = l:parts[1]

  if l:cmd == "ctrl-v"
    execute ":vsplit " . l:file
  elseif l:cmd == "ctrl-x"
    execute ":split " . l:file
  else
    execute ":e " . l:file
  endif
endfunction

function! ReindexFiles()
  echo "Re-indexing files..."
  let l:response = system('find . -type f
      \ -not -iwholename "*.swp"
      \ -not -iwholename "*/bower_components/*"
      \ -not -iwholename "*/data/*"
      \ -not -iwholename "*/node_modules/*"
      \ -not -iwholename "*/tmp/*"
      \ -not -iwholename ".git*"
      \ -not -iwholename "venv/*"
      \ -print > .file-index')
  redraw!
  echo "Done"
endfunction

nnoremap <C-p> :call ReindexFiles()<CR>
nnoremap <C-p><C-p> :call FindFile()<CR>
